from asyncio.exceptions import TimeoutError
from Data import Data
from pyrogram import Client, filters
from telethon import TelegramClient
from telethon.sessions import StringSession
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneNumberInvalid,
    PhoneCodeInvalid,
    PhoneCodeExpired,
    SessionPasswordNeeded,
    PasswordHashInvalid
)
from telethon.errors import (
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
    PasswordHashInvalidError
)

ERROR_MESSAGE = "Oops! An exception occurred! \n\n**Error** : {} " \
            "\n\nTolong Laporan ke [Support](t.me/NastySupportt) jika eror " \
            "sensitive information and you if want to report this as " \
            "this error message is not being logged by us!"


@Client.on_message(filters.private & ~filters.forwarded & filters.command('generate'))
async def main(_, msg):
    await msg.reply(
        "s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ò…™ ü…™ ú s·¥õ Ä…™…¥…¢ ·¥ç·¥Ä…¥·¥Ä  è·¥Ä…¥…¢ …™…¥…¢…™…¥ ·¥ã·¥Ä·¥ç·¥ú ·¥Ä·¥ç ô…™ ü ü§ó",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç", callback_data="pyrogram"),
            InlineKeyboardButton("·¥õ·¥á ü·¥á·¥õ ú·¥è…¥", callback_data="telethon")
        ]])
    )


async def generate_session(bot, msg, telethon=False):
    await msg.reply("·¥ç·¥á·¥ç·¥ú ü·¥Ä…™ {} s·¥áss…™·¥è…¥ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥ò…¥...".format("Telethon" if telethon else "Pyrogram"))
    user_id = msg.chat.id
    api_id_msg = await bot.ask(user_id, 's…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç  `API_ID`', filters=filters.text)
    if await cancelled(api_id_msg):
        return
    try:
        api_id = int(api_id_msg.text)
    except ValueError:
        await api_id_msg.reply('API_ID ·¥õ…™·¥Ö·¥Ä·¥ã  ô·¥á…¥·¥Ä Ä (which must be an integer). ·¥ç·¥è ú·¥è…¥ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥ú ü·¥Ä…¥…¢.', quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    api_hash_msg = await bot.ask(user_id, 's…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç `API_HASH`', filters=filters.text)
    if await cancelled(api_id_msg):
        return
    api_hash = api_hash_msg.text
    phone_number_msg = await bot.ask(user_id, 's…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç `PHONE_NUMBER` ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ã·¥è·¥Ö·¥á …¥·¥è·¥ç·¥è Ä. \nExample : `+628xxxxxxx`', filters=filters.text)
    if await cancelled(api_id_msg):
        return
    phone_number = phone_number_msg.text
    await msg.reply("Sending OTP...")
    if telethon:
        client = TelegramClient(StringSession(), api_id, api_hash)
    else:
        client = Client(":memory:", api_id, api_hash)
    await client.connect()
    try:
        if telethon:
            code = await client.send_code_request(phone_number)
        else:
            code = await client.send_code(phone_number)
    except (ApiIdInvalid, ApiIdInvalidError):
        await msg.reply('`API_ID` and `API_HASH` combination is invalid. Please start generating session again.', reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    except (PhoneNumberInvalid, PhoneNumberInvalidError):
        await msg.reply('`PHONE_NUMBER` s·¥Ä ü·¥Ä ú. ·¥ç·¥è ú·¥è…¥ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥ú ü·¥Ä…¥…¢.', reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    try:
        phone_code_msg = await bot.ask(user_id, "s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™·¥ãs·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ö…™ ·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä, ·¥ä…™·¥ã·¥Ä ·¥Ä·¥Ö·¥Ä, s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥ã·¥á s…™…¥…™ s·¥á·¥õ·¥á ü·¥Ä ú ·¥ç·¥á·¥ç ô·¥Ä·¥Ñ·¥Ä “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú …™…¥…™. \n·¥ä…™·¥ã·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ä·¥Ö·¥Ä ü·¥Ä ú 12345, s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç 1 2 3 4 5..", filters=filters.text, timeout=600)
        if await cancelled(api_id_msg):
            return
    except TimeoutError:
        await msg.reply(' ô·¥Ä·¥õ·¥Äs ·¥°·¥Ä·¥ã·¥õ·¥ú ·¥ç·¥á…¥·¥Ñ·¥Ä·¥ò·¥Ä…™ 10 ·¥ç·¥á…¥…™·¥õ. ·¥ç·¥è ú·¥è…¥ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥ú ü·¥Ä…¥…¢.', reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    phone_code = phone_code_msg.text.replace(" ", "")
    try:
        if telethon:
            await client.sign_in(phone_number, phone_code, password=None)
        else:
            await client.sign_in(phone_number, code.phone_code_hash, phone_code)
    except (PhoneCodeInvalid, PhoneCodeInvalidError):
        await msg.reply('·¥è·¥õ·¥ò …™s …™…¥·¥†·¥Ä ü…™·¥Ö. ·¥ç·¥è ú·¥è…¥ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥ú ü·¥Ä…¥…¢.', reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    except (PhoneCodeExpired, PhoneCodeExpiredError):
        await msg.reply('·¥è·¥õ·¥ò …™s …™…¥·¥†·¥Ä ü…™·¥Ö. ·¥ç·¥è ú·¥è…¥ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥ú ü·¥Ä…¥…¢.', reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    except (SessionPasswordNeeded, SessionPasswordNeededError):
        try:
            two_step_msg = await bot.ask(user_id, '·¥Ä·¥ã·¥ú…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ ·¥†·¥á Ä…™·¥†…™·¥ã·¥Äs…™ ·¥Ö·¥ú·¥Ä  ü·¥Ä…¥…¢·¥ã·¥Ä ú. ·¥ç·¥è ú·¥è…¥ ·¥ç·¥Äs·¥ú·¥ã·¥Ä…¥ ·¥ã·¥Ä·¥õ·¥Ä s·¥Ä…¥·¥Ö…™…¥ è·¥Ä.', filters=filters.text, timeout=300)
        except TimeoutError:
            await msg.reply(' ô·¥Ä·¥õ·¥Äs ·¥°·¥Ä·¥ã·¥õ·¥ú ·¥ç·¥á…¥·¥Ñ·¥Ä·¥ò·¥Ä…™ 5 ·¥ç·¥á…¥…™·¥õ. ·¥ç·¥è ú·¥è…¥ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥ú ü·¥Ä…¥…¢.', reply_markup=InlineKeyboardMarkup(Data.generate_button))
            return
        try:
            password = two_step_msg.text
            if telethon:
                await client.sign_in(password=password)
            else:
                await client.check_password(password=password)
            if await cancelled(api_id_msg):
                return
        except (PasswordHashInvalid, PasswordHashInvalidError):
            await two_step_msg.reply('·¥ã·¥Ä·¥õ·¥Ä s·¥Ä…¥·¥Ö…™ s·¥Ä ü·¥Ä ú. ·¥ç·¥è ú·¥è…¥ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥ú ü·¥Ä…¥…¢.', quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
            return
    if telethon:
        string_session = client.session.save()
    else:
        string_session = await client.export_session_string()
    text = "**{} STRING SESSION** \n\n`{}` \n\nGenerated by @joostringbot".format("TELETHON" if telethon else "PYROGRAM", string_session)
    await client.send_message("me", text)
    await client.disconnect()
    await phone_code_msg.reply(" ô·¥á Ä ú·¥Äs…™ ü ·¥ç·¥á…¥…¢·¥Ä·¥ç ô…™ ü {} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥. \n\s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥Ñ·¥á·¥ã ·¥ò·¥ás·¥Ä…¥ ·¥õ·¥á Äs…™·¥ç·¥ò·¥Ä…¥. \n\n ô è @ikhsanntarjo".format("telethon" if telethon else "pyrogram"))


async def cancelled(msg):
    if "/cancel" in msg.text:
        await msg.reply("·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás!", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return True
    elif "/restart" in msg.text:
        await msg.reply("·¥ç·¥á·¥ç·¥ú ü·¥Ä…™ ·¥ú ü·¥Ä…¥…¢  ô·¥è·¥õ!", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return True
    elif msg.text.startswith("/"):  # Bot Commands
        await msg.reply("·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás!", quote=True)
        return True
    else:
        return False


# @Client.on_message(filters.private & ~filters.forwarded & filters.command(['cancel', 'restart']))
# async def formalities(_, msg):
#     if "/cancel" in msg.text:
#         await msg.reply("·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ s·¥á·¥ç·¥ú·¥Ä ·¥ò Ä·¥ès·¥ás!", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
#         return True
#     elif "/restart" in msg.text:
#         await msg.reply("·¥ç·¥á·¥ç·¥ú ü·¥Ä…™ ·¥ú ü·¥Ä…¥…¢  ô·¥è·¥õ!", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
#         return True
#     else:
#         return False
